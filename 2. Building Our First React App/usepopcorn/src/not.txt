qual estrela vai para display full={rating >= i + 1}

hover nas estrelas:
state Const [tempRating, setTempRating] = useState(0);
onHoverIn={() => setTempRating(i + 1)}
onHoverOut={() => setTempRating(0)}
onMouseEnter={() => onHoverIn()}
onMouseLeave={() => onHoverOut()}

props editaveis pelo usuário do componente:
css dentro da função
props passadas para o css
width and height get the props
svg edit the fill and stroke


prop className:
adicionar prop className para que o usuário consiga editar o style do component

prop messages:
passar prop como array
utilizar prop em <p> return StarRating
 {messages.length === maxRating
          ? tempRating
            ? messages[tempRating - 1]
            : messages[rating - 1]
          : tempRating
          ? tempRating
          : rating || ""}

prop defaultRating:
prop para o valor inicial do rating, declarar o state rating com o valor inicial de defaultRating


prop SetMovieRating:
levantamos o state rating dentro de StarRating para que possamos usa-lo fora do componente
criamos um novo component
declaramos um state nele
retornamos StarRating e passamos o setState como setMovieState
usamos rating para setar setMovieState dentro da função handleRating

setar props como boll, num, str:
import PropTypes from "prop-types";
declarar 
StarRating.propTypes = {};
especifiar tipo para cada prop
maxRating: PropTypes.number,
é possível usar maxRating: PropTypes.number.isRequired
StarRating.propTypes = {
  maxRating: PropTypes.number,
  defaultRating: PropTypes.number,
  colo: PropTypes.string,
  size: PropTypes.number,
  messages: PropTypes.string,
  className: PropTypes.string,
  setMovieRating: PropTypes.func
  *boll, 
};



custom hook

fetch extract for custom hook
- new file useMovie.js
- export function named 
- copy and past de content/ state isLoading, setError, setMovies/ -  import useState and useEffect
- query  came as arg
- import {useMovies} from "./useMovies"
- return {movies, isLoading, error}
handleClosemovie*
- key past on custom hook 
-destructure const {movies, isLoading, error} = useMovie(query)
-pass callback
-callback?.()


171 - creating useLocalStorageState

-- create file useLocalStorageState (export nameli)
-- call hook [watched, setWatched] = useLocalStorageState([])
-- copy/past const watched, setWatched useState content 
-- get useEffect and past on useLocalStorageState
-- pass generic key
-- return value setValue
-- test if there is storedValue




